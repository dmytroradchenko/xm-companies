// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "xm-companies/internal/xm-companies/model"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// CompaniesRepository is an autogenerated mock type for the CompaniesRepository type
type CompaniesRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, company
func (_m *CompaniesRepository) Create(ctx context.Context, company *model.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, code
func (_m *CompaniesRepository) Delete(ctx context.Context, code string) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBy provides a mock function with given fields: ctx, filter
func (_m *CompaniesRepository) FindBy(ctx context.Context, filter model.SearchFilter) ([]*model.Company, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*model.Company
	if rf, ok := ret.Get(0).(func(context.Context, model.SearchFilter) []*model.Company); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Company)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.SearchFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, company
func (_m *CompaniesRepository) Update(ctx context.Context, company *model.Company) error {
	ret := _m.Called(ctx, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCompaniesRepository creates a new instance of CompaniesRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompaniesRepository(t testing.TB) *CompaniesRepository {
	mock := &CompaniesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
